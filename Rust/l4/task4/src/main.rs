
fn main() {
    println!("{}", my_first_interpreter("+++++++++++++++++++++++++++.+++.+++++.++.+++++..++++++++++++++++++.+.++++++++++++.++++++..++++.+.++++.++++񻦞++++++++++++++++..+.+.++++..++++++++++++.+++++++++++++.+++++++++++.+++.+++++++.++++.++++++++.+++.++.+++++++++++..+++++++++.+++++++++++++.+..+++++++++𛦌.+++.+++++.+++++++++++++++++++++++++++++++++++++++.+++++.+++..++.++++.+++++++++++++++.+++++++++++++++++++++++++++++.++++++++.+++++++++++++++++++++++.+..++++++++++++.+.++++++.++++++++++++++++++.++++.++++++++++.++++.+++++++.++++++++++++++++++++++++++++++.++++.+++++++++...+++.++++++++++.+++++++++.++𝇦.+.++++.++++++++++++++++++++++++++++++++++++++++..+++++++++.+++++++++++++++++++++++++.++++++++++++++++++++++.++++++++++++++++++.++++++++++.++++.+++++++++++.++++++++++++++++++++++++++++++.++.++.+++++++++++++++++.+++++++.++++++++++++.++.++.++++++..++++++.+++++++++++++++++++++++++++++++...++++++++++++++++++++++++++++++++++++++++++++++򢺐++.+++++++++++++++++++򄝨++++++++++++++++++++++++..+++++..+++.+++++++++𷅹+++++++++++.+++++++++++.++++++++++++++++++++++++++.++++.+++++.+++.++++++.+++.++++++++.+++.+++++++.+++++.++++++++++++++++++++++++++.+.+.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+++.+++++.+++.++.++++++++++++++++++++++++++.򙽡+++++++++++++++++++++.񇐈+..+++++++++.+++++++.++.++.+++..+++..++++.+++++++++++++++++++++++++++++++++++.+.+++++++++++++++++++....+++++.++𭋥+++򦕔++++.++++++++.+++++++++++++񳸳+++++.+++.+++++++++++++++++++.+.++.+++++++.+++++++++++++++.++"));
}

fn my_first_interpreter(code: &str) -> String {
    let command_characters: String = code
        .chars()
        .filter(|&x| (x == '+') | (x == '.')).collect();
    let result: Vec<u8> = command_characters
        .split('.')
        .map(|x| x.len())
        .scan(0, |state, el| {
            *state += el;
            Some(*state as u8)
        }).collect();
    let c = result.len() - 1;
    result.into_iter().map(|x| x as char).take(c).collect()
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_1() {
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    }
    #[test]
    fn test_2() {
        assert_eq!(my_first_interpreterello, World!");
    }
    #[test]
    fn test_3() {
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++...++.+."), "!!!#$");
    }
    #[test]
    fn test_4() {
        assert_eq!(my_first_interpreter
    }
    #[test]
    fn test_5() {
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+..."), "@ABCCC");
    }
    #[test]
    fn test_6() {
        assert_eq!(my_first_interpreter(""), "");
    }
    #[test]
    fn test_7() {
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+."), "0123456789");
    }
    #[test]
    fn test_8() {
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+."), "<=>");
    }
    #[test]
    fn test_with_comment_1() {
        assert_eq!(my_first_interpreter("PPP++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++c.++r+++++++++++++ew++++++++++++++.+++++++..+++.+DAS23+++++++++++++++++++++++++++++++++++++++++++++++asssaaello, World!");
    }
    #[test]
    fn test_with_comment_2() {
        assert_eq!(my_first_interpreter("++++++++++++++++HAA+++++++++++++++++++++++++++DD++++++++++++Cd+++++++++++++++++.d+++++++++++++++++++++++++++++.+++++++sss..+++.++++++++++++++++++++++++++++++++++++++++++++dello, World!");
    }

}