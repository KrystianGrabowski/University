#lang racket

(define (cube-root x)

  (define (distance a b)
    (abs (- a b)))

  (define (square a)
    (* a a))

  (define (cube a)
    (* a a a))

  (define (div-by-three a b)
    (/ (+ a b) 3))

  (define (double-val a)
    (+ a a))
  
  (define (betteraprox approximation)
    (div-by-three (/ x (square approximation)) (double-val approximation)))

  (define (isgood? approximation)
    (< (distance x (cube approximation)) 0.000001))

  (define (cube-iter approximation)
    (cond
      [(isgood? approximation) approximation]
      [ else   (cube-iter (betteraprox approximation))]))
  
  (cube-iter 1.0))


(define (test-function x value)
  (define (compare)
        (< (abs (- value (cube-root x))) 0.000001))

  (printf "~v ~%Value:     ~v~%Cube-root: ~v isGood?:~v ~%"
          x value (cube-root x) (compare) ))

(test-function 6 1.81712059283213965889)
(test-function 2 1.25992104989487316476)
(test-function 3 1.44224957030740838232)
(test-function 5 1.70997594667669698935)
(test-function 8 2.0)
(test-function 12 2.28942848510666373561)
(test-function 64 4.0)
(test-function 66 4.04124002062219027080)
(test-function 99 4.62606500918274179309)
(test-function 61 3.93649718310217319582)
(test-function 23 2.84386697985156547769)
(test-function 55 3.80295246076139161854)
(test-function 100 4.641588833612778892410)
(test-function 1000 10.0)