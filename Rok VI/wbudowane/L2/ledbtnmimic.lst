
ledbtnmimic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006c0  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eff  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>


int main() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	c4 56       	subi	r28, 0x64	; 100
  8a:	d1 09       	sbc	r29, r1
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  //Zadanie1
  DDRB = 0;
  96:	14 b8       	out	0x04, r1	; 4
  PORTB |= _BV(PB4);
  98:	2c 9a       	sbi	0x05, 4	; 5
  DDRB |= _BV(PB5);
  9a:	25 9a       	sbi	0x04, 5	; 4
  9c:	ae 01       	movw	r20, r28
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
  a2:	84 e6       	ldi	r24, 0x64	; 100
  a4:	da 01       	movw	r26, r20
  a6:	1d 92       	st	X+, r1
  a8:	8a 95       	dec	r24
  aa:	e9 f7       	brne	.-6      	; 0xa6 <main+0x26>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
    buffer[iter] = 0;
    _delay_ms(10);
    if (~PINB & _BV(PB4)) {
      _delay_ms(1);
      if (~PINB & _BV(PB4)) {
        buffer[iter] = 1;
  b0:	31 e0       	ldi	r19, 0x01	; 1
  for(int i=0; i<100; i++) {
    buffer[i] = 0;
  }

  while (1) {
    if (buffer[iter] != 0) {
  b2:	fa 01       	movw	r30, r20
  b4:	e8 0f       	add	r30, r24
  b6:	f9 1f       	adc	r31, r25
  b8:	20 81       	ld	r18, Z
  ba:	21 11       	cpse	r18, r1
  bc:	17 c0       	rjmp	.+46     	; 0xec <main+0x6c>
      PORTB |= _BV(PB5);
    }
    if(buffer[iter] == 0){
      PORTB &= ~_BV(PB5);
  be:	2d 98       	cbi	0x05, 5	; 5
    }
    buffer[iter] = 0;
  c0:	fa 01       	movw	r30, r20
  c2:	e8 0f       	add	r30, r24
  c4:	f9 1f       	adc	r31, r25
  c6:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	af e3       	ldi	r26, 0x3F	; 63
  ca:	bc e9       	ldi	r27, 0x9C	; 156
  cc:	11 97       	sbiw	r26, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
    _delay_ms(10);
    if (~PINB & _BV(PB4)) {
  d4:	1c 9b       	sbis	0x03, 4	; 3
  d6:	12 c0       	rjmp	.+36     	; 0xfc <main+0x7c>
      _delay_ms(1);
      if (~PINB & _BV(PB4)) {
        buffer[iter] = 1;
    }  
  }
    if (iter < 100 - 1) {
  d8:	83 36       	cpi	r24, 0x63	; 99
  da:	91 05       	cpc	r25, r1
  dc:	64 f4       	brge	.+24     	; 0xf6 <main+0x76>
      ++iter;
  de:	01 96       	adiw	r24, 0x01	; 1
  for(int i=0; i<100; i++) {
    buffer[i] = 0;
  }

  while (1) {
    if (buffer[iter] != 0) {
  e0:	fa 01       	movw	r30, r20
  e2:	e8 0f       	add	r30, r24
  e4:	f9 1f       	adc	r31, r25
  e6:	20 81       	ld	r18, Z
  e8:	22 23       	and	r18, r18
  ea:	49 f3       	breq	.-46     	; 0xbe <main+0x3e>
      PORTB |= _BV(PB5);
  ec:	2d 9a       	sbi	0x05, 5	; 5
    }
    if(buffer[iter] == 0){
  ee:	20 81       	ld	r18, Z
  f0:	21 11       	cpse	r18, r1
  f2:	e6 cf       	rjmp	.-52     	; 0xc0 <main+0x40>
  f4:	e4 cf       	rjmp	.-56     	; 0xbe <main+0x3e>
  }
    if (iter < 100 - 1) {
      ++iter;
    }
    else{
      iter = 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	db cf       	rjmp	.-74     	; 0xb2 <main+0x32>
  fc:	af e9       	ldi	r26, 0x9F	; 159
  fe:	bf e0       	ldi	r27, 0x0F	; 15
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x80>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
    }
    buffer[iter] = 0;
    _delay_ms(10);
    if (~PINB & _BV(PB4)) {
      _delay_ms(1);
      if (~PINB & _BV(PB4)) {
 108:	1c 99       	sbic	0x03, 4	; 3
 10a:	e6 cf       	rjmp	.-52     	; 0xd8 <main+0x58>
        buffer[iter] = 1;
 10c:	30 83       	st	Z, r19
 10e:	e4 cf       	rjmp	.-56     	; 0xd8 <main+0x58>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
