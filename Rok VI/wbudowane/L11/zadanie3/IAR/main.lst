
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800136  00800136  00000dd4  2**0
                  ALLOC
  3 .stab         000013ec  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d1  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003491  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034a4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000407a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  9e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e0:	08 95       	ret

000000e2 <adc_init>:
}

// inicjalizacja ADC
void adc_init()
{
  ADMUX = _BV(REFS0) | _BV(REFS1);
  e2:	80 ec       	ldi	r24, 0xC0	; 192
  e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  DIDR0   = _BV(ADC0D) | _BV(ADC1D); // wyłącz wejście cyfrowe na ADC0
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADEN); // włącz ADC
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <__vector_16>:
 */
// #pragma vector = TIMER0_OVF_vect
// __interrupt void TIMER0_OVF_ISR( void )
volatile uint16_t ida = 0;

ISR(TIMER0_OVF_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
  if(ida < TIME_INTERVAL)
 10c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 110:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 114:	8d 39       	cpi	r24, 0x9D	; 157
 116:	91 05       	cpc	r25, r1
 118:	80 f0       	brcs	.+32     	; 0x13a <__vector_16+0x3c>
    ida++;
  else{
    gFlags.pidTimer = TRUE;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    ida = 0;
 124:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 128:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
  }
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti
// __interrupt void TIMER0_OVF_ISR( void )
volatile uint16_t ida = 0;

ISR(TIMER0_OVF_vect){
  if(ida < TIME_INTERVAL)
    ida++;
 13a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 13e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 148:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
  else{
    gFlags.pidTimer = TRUE;
    ida = 0;
  }
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <Init>:

/*! \brief Init of PID controller demo
 */
void Init(void)
{
  pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR , K_D * SCALING_FACTOR , &pidData);
 15a:	26 e4       	ldi	r18, 0x46	; 70
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e8       	ldi	r22, 0x80	; 128
 164:	72 e0       	ldi	r23, 0x02	; 2
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	9a e0       	ldi	r25, 0x0A	; 10
 16a:	0e 94 44 01 	call	0x288	; 0x288 <pid_Init>

  // Set up timer, enable timer/counte 0 overflow interrupt
  TCCR0B = _BV(CS00);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0);
 172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  TCNT0 = 0;
 176:	16 bc       	out	0x26, r1	; 38
 178:	08 95       	ret

0000017a <Get_Reference>:
 * This function must return the reference value.
 * May be constant or varying
 */
int16_t Get_Reference(void)
{
  ADMUX = _BV(REFS0);
 17a:	80 e4       	ldi	r24, 0x40	; 64
 17c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA |= _BV(ADSC); // wykonaj konwersję
 180:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
 18a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 18e:	84 ff       	sbrs	r24, 4
 190:	fc cf       	rjmp	.-8      	; 0x18a <Get_Reference+0x10>
  ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)
 192:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 196:	80 61       	ori	r24, 0x10	; 16
 198:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  return temps[ADC>>6];
 19c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1a0:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1a4:	00 24       	eor	r0, r0
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	00 1c       	adc	r0, r0
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	00 1c       	adc	r0, r0
 1b2:	ef 2f       	mov	r30, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ef 5f       	subi	r30, 0xFF	; 255
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
}
 1be:	80 81       	ld	r24, Z
 1c0:	91 81       	ldd	r25, Z+1	; 0x01
 1c2:	08 95       	ret

000001c4 <Get_Measurement>:
 *
 * This function must return the measured data
 */
int16_t Get_Measurement(void)
{
  ADMUX = _BV(REFS0) | _BV(REFS1) | _BV(MUX0);
 1c4:	81 ec       	ldi	r24, 0xC1	; 193
 1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	82 e5       	ldi	r24, 0x52	; 82
 1ce:	97 e0       	ldi	r25, 0x07	; 7
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <Get_Measurement+0xc>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <Get_Measurement+0x16>
 1da:	00 00       	nop
  _delay_ms(150);
  ADCSRA |= _BV(ADSC); // wykonaj konwersję
 1dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
 1e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1ea:	84 ff       	sbrs	r24, 4
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <Get_Measurement+0x22>
  ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)
 1ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  int16_t tempe = ((ADC* (1100/1024)) - 500) / 10;
 1f8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1fc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  return tempe;
 200:	24 5f       	subi	r18, 0xF4	; 244
 202:	31 40       	sbci	r19, 0x01	; 1
 204:	ad ec       	ldi	r26, 0xCD	; 205
 206:	bc ec       	ldi	r27, 0xCC	; 204
 208:	0e 94 4d 03 	call	0x69a	; 0x69a <__umulhisi3>
}
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	08 95       	ret

0000021a <meine_delete>:
 * Set the output from the controller as input
 * to system.
 */

void meine_delete(int16_t inputValue) {
  for (uint16_t i=0; i<inputValue; i++) {
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	69 f0       	breq	.+26     	; 0x238 <meine_delete+0x1e>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	ef e9       	ldi	r30, 0x9F	; 159
 224:	ff e0       	ldi	r31, 0x0F	; 15
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <meine_delete+0xc>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <meine_delete+0x12>
 22c:	00 00       	nop
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	a9 f7       	brne	.-22     	; 0x222 <meine_delete+0x8>
 238:	08 95       	ret

0000023a <Set_Input>:
  }
}

void Set_Input(int16_t inputValue)
{
  if (inputValue < 0) {
 23a:	97 fd       	sbrc	r25, 7
 23c:	12 c0       	rjmp	.+36     	; 0x262 <Set_Input+0x28>
     meine_delete(inputValue * -1);
  }
  else{
    LED_PORT |= _BV(LED);
 23e:	2d 9a       	sbi	0x05, 5	; 5
 * Set the output from the controller as input
 * to system.
 */

void meine_delete(int16_t inputValue) {
  for (uint16_t i=0; i<inputValue; i++) {
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	69 f0       	breq	.+26     	; 0x25e <Set_Input+0x24>
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	ef e9       	ldi	r30, 0x9F	; 159
 24a:	ff e0       	ldi	r31, 0x0F	; 15
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <Set_Input+0x12>
 250:	00 c0       	rjmp	.+0      	; 0x252 <Set_Input+0x18>
 252:	00 00       	nop
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	28 17       	cp	r18, r24
 25a:	39 07       	cpc	r19, r25
 25c:	a9 f7       	brne	.-22     	; 0x248 <Set_Input+0xe>
     meine_delete(inputValue * -1);
  }
  else{
    LED_PORT |= _BV(LED);
    meine_delete(inputValue);
    LED_PORT &= ~_BV(LED);
 25e:	2d 98       	cbi	0x05, 5	; 5
 260:	08 95       	ret
}

void Set_Input(int16_t inputValue)
{
  if (inputValue < 0) {
     meine_delete(inputValue * -1);
 262:	91 95       	neg	r25
 264:	81 95       	neg	r24
 266:	91 09       	sbc	r25, r1
 * Set the output from the controller as input
 * to system.
 */

void meine_delete(int16_t inputValue) {
  for (uint16_t i=0; i<inputValue; i++) {
 268:	71 f0       	breq	.+28     	; 0x286 <Set_Input+0x4c>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	ef e9       	ldi	r30, 0x9F	; 159
 270:	ff e0       	ldi	r31, 0x0F	; 15
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <Set_Input+0x38>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Set_Input+0x3e>
 278:	00 00       	nop
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	a9 f7       	brne	.-22     	; 0x26e <Set_Input+0x34>
 284:	08 95       	ret
 286:	08 95       	ret

00000288 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	fb 01       	movw	r30, r22
 28e:	e9 01       	movw	r28, r18
  // Start values for PID controller
  pid->sumError = 0;
 290:	1a 82       	std	Y+2, r1	; 0x02
 292:	1b 82       	std	Y+3, r1	; 0x03
 294:	1c 82       	std	Y+4, r1	; 0x04
 296:	1d 82       	std	Y+5, r1	; 0x05
  pid->lastProcessValue = 0;
 298:	19 82       	std	Y+1, r1	; 0x01
 29a:	18 82       	st	Y, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
 29c:	9f 83       	std	Y+7, r25	; 0x07
 29e:	8e 83       	std	Y+6, r24	; 0x06
  pid->I_Factor = i_factor;
 2a0:	79 87       	std	Y+9, r23	; 0x09
 2a2:	68 87       	std	Y+8, r22	; 0x08
  pid->D_Factor = d_factor;
 2a4:	5b 87       	std	Y+11, r21	; 0x0b
 2a6:	4a 87       	std	Y+10, r20	; 0x0a
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
 2a8:	bc 01       	movw	r22, r24
 2aa:	6f 5f       	subi	r22, 0xFF	; 255
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	9f e7       	ldi	r25, 0x7F	; 127
 2b2:	0e 94 1a 03 	call	0x634	; 0x634 <__divmodhi4>
 2b6:	7d 87       	std	Y+13, r23	; 0x0d
 2b8:	6c 87       	std	Y+12, r22	; 0x0c
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 2ba:	9f 01       	movw	r18, r30
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	03 2e       	mov	r0, r19
 2c2:	00 0c       	add	r0, r0
 2c4:	44 0b       	sbc	r20, r20
 2c6:	55 0b       	sbc	r21, r21
 2c8:	6f ef       	ldi	r22, 0xFF	; 255
 2ca:	7f ef       	ldi	r23, 0xFF	; 255
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	9f e3       	ldi	r25, 0x3F	; 63
 2d0:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodsi4>
 2d4:	2e 87       	std	Y+14, r18	; 0x0e
 2d6:	3f 87       	std	Y+15, r19	; 0x0f
 2d8:	48 8b       	std	Y+16, r20	; 0x10
 2da:	59 8b       	std	Y+17, r21	; 0x11
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	eb 01       	movw	r28, r22
 2f0:	fa 01       	movw	r30, r20
  int16_t error, p_term, d_term;
  int32_t i_term, ret, temp;

  error = setPoint - processValue;
 2f2:	ac 01       	movw	r20, r24
 2f4:	46 1b       	sub	r20, r22
 2f6:	57 0b       	sbc	r21, r23

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
 2f8:	84 85       	ldd	r24, Z+12	; 0x0c
 2fa:	95 85       	ldd	r25, Z+13	; 0x0d
 2fc:	84 17       	cp	r24, r20
 2fe:	95 07       	cpc	r25, r21
 300:	7c f0       	brlt	.+30     	; 0x320 <pid_Controller+0x3e>
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError){
 302:	91 95       	neg	r25
 304:	81 95       	neg	r24
 306:	91 09       	sbc	r25, r1
 308:	48 17       	cp	r20, r24
 30a:	59 07       	cpc	r21, r25
 30c:	0c f0       	brlt	.+2      	; 0x310 <pid_Controller+0x2e>
 30e:	8e c0       	rjmp	.+284    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 310:	cc 24       	eor	r12, r12
 312:	c3 94       	inc	r12
 314:	30 e8       	ldi	r19, 0x80	; 128
 316:	d3 2e       	mov	r13, r19
 318:	ee 24       	eor	r14, r14
 31a:	ea 94       	dec	r14
 31c:	fe 2c       	mov	r15, r14
 31e:	06 c0       	rjmp	.+12     	; 0x32c <pid_Controller+0x4a>
 320:	cc 24       	eor	r12, r12
 322:	ca 94       	dec	r12
 324:	6f e7       	ldi	r22, 0x7F	; 127
 326:	d6 2e       	mov	r13, r22
 328:	e1 2c       	mov	r14, r1
 32a:	f1 2c       	mov	r15, r1
  else{
    p_term = pid_st->P_Factor * error;
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
 32c:	05 2e       	mov	r0, r21
 32e:	00 0c       	add	r0, r0
 330:	66 0b       	sbc	r22, r22
 332:	77 0b       	sbc	r23, r23
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	93 81       	ldd	r25, Z+3	; 0x03
 338:	a4 81       	ldd	r26, Z+4	; 0x04
 33a:	b5 81       	ldd	r27, Z+5	; 0x05
 33c:	9a 01       	movw	r18, r20
 33e:	ab 01       	movw	r20, r22
 340:	28 0f       	add	r18, r24
 342:	39 1f       	adc	r19, r25
 344:	4a 1f       	adc	r20, r26
 346:	5b 1f       	adc	r21, r27
  if(temp > pid_st->maxSumError){
 348:	86 85       	ldd	r24, Z+14	; 0x0e
 34a:	97 85       	ldd	r25, Z+15	; 0x0f
 34c:	a0 89       	ldd	r26, Z+16	; 0x10
 34e:	b1 89       	ldd	r27, Z+17	; 0x11
 350:	82 17       	cp	r24, r18
 352:	93 07       	cpc	r25, r19
 354:	a4 07       	cpc	r26, r20
 356:	b5 07       	cpc	r27, r21
 358:	0c f0       	brlt	.+2      	; 0x35c <pid_Controller+0x7a>
 35a:	4a c0       	rjmp	.+148    	; 0x3f0 <pid_Controller+0x10e>
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
 35c:	82 83       	std	Z+2, r24	; 0x02
 35e:	93 83       	std	Z+3, r25	; 0x03
 360:	a4 83       	std	Z+4, r26	; 0x04
 362:	b5 83       	std	Z+5, r27	; 0x05
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
  if(temp > pid_st->maxSumError){
    i_term = MAX_I_TERM;
 364:	6f ef       	ldi	r22, 0xFF	; 255
 366:	7f ef       	ldi	r23, 0xFF	; 255
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	9f e3       	ldi	r25, 0x3F	; 63
    pid_st->sumError = temp;
    i_term = pid_st->I_Factor * pid_st->sumError;
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
 36c:	20 81       	ld	r18, Z
 36e:	31 81       	ldd	r19, Z+1	; 0x01
 370:	2c 1b       	sub	r18, r28
 372:	3d 0b       	sbc	r19, r29
 374:	a2 85       	ldd	r26, Z+10	; 0x0a
 376:	b3 85       	ldd	r27, Z+11	; 0x0b
 378:	2a 9f       	mul	r18, r26
 37a:	a0 01       	movw	r20, r0
 37c:	2b 9f       	mul	r18, r27
 37e:	50 0d       	add	r21, r0
 380:	3a 9f       	mul	r19, r26
 382:	50 0d       	add	r21, r0
 384:	11 24       	eor	r1, r1

  pid_st->lastProcessValue = processValue;
 386:	d1 83       	std	Z+1, r29	; 0x01
 388:	c0 83       	st	Z, r28

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 38a:	dc 01       	movw	r26, r24
 38c:	cb 01       	movw	r24, r22
 38e:	8c 0d       	add	r24, r12
 390:	9d 1d       	adc	r25, r13
 392:	ae 1d       	adc	r26, r14
 394:	bf 1d       	adc	r27, r15
 396:	05 2e       	mov	r0, r21
 398:	00 0c       	add	r0, r0
 39a:	66 0b       	sbc	r22, r22
 39c:	77 0b       	sbc	r23, r23
 39e:	84 0f       	add	r24, r20
 3a0:	95 1f       	adc	r25, r21
 3a2:	a6 1f       	adc	r26, r22
 3a4:	b7 1f       	adc	r27, r23
 3a6:	b7 fd       	sbrc	r27, 7
 3a8:	4f c0       	rjmp	.+158    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3aa:	27 e0       	ldi	r18, 0x07	; 7
 3ac:	b5 95       	asr	r27
 3ae:	a7 95       	ror	r26
 3b0:	97 95       	ror	r25
 3b2:	87 95       	ror	r24
 3b4:	2a 95       	dec	r18
 3b6:	d1 f7       	brne	.-12     	; 0x3ac <pid_Controller+0xca>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	20 e8       	ldi	r18, 0x80	; 128
 3bc:	92 07       	cpc	r25, r18
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	a2 07       	cpc	r26, r18
 3c2:	b2 07       	cpc	r27, r18
 3c4:	24 f4       	brge	.+8      	; 0x3ce <pid_Controller+0xec>
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e8       	ldi	r25, 0x80	; 128
 3ca:	af ef       	ldi	r26, 0xFF	; 255
 3cc:	bf ef       	ldi	r27, 0xFF	; 255
  }
  else if(ret < -MAX_INT){
    ret = -MAX_INT;
  }

  return((int16_t)ret);
 3ce:	81 15       	cp	r24, r1
 3d0:	20 e8       	ldi	r18, 0x80	; 128
 3d2:	92 07       	cpc	r25, r18
 3d4:	a1 05       	cpc	r26, r1
 3d6:	b1 05       	cpc	r27, r1
 3d8:	24 f0       	brlt	.+8      	; 0x3e2 <pid_Controller+0x100>
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	9f e7       	ldi	r25, 0x7F	; 127
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	08 95       	ret
  temp = pid_st->sumError + error;
  if(temp > pid_st->maxSumError){
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError){
 3f0:	b0 95       	com	r27
 3f2:	a0 95       	com	r26
 3f4:	90 95       	com	r25
 3f6:	81 95       	neg	r24
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	af 4f       	sbci	r26, 0xFF	; 255
 3fc:	bf 4f       	sbci	r27, 0xFF	; 255
 3fe:	28 17       	cp	r18, r24
 400:	39 07       	cpc	r19, r25
 402:	4a 07       	cpc	r20, r26
 404:	5b 07       	cpc	r21, r27
 406:	4c f4       	brge	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
 408:	82 83       	std	Z+2, r24	; 0x02
 40a:	93 83       	std	Z+3, r25	; 0x03
 40c:	a4 83       	std	Z+4, r26	; 0x04
 40e:	b5 83       	std	Z+5, r27	; 0x05
  if(temp > pid_st->maxSumError){
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError){
    i_term = -MAX_I_TERM;
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 ec       	ldi	r25, 0xC0	; 192
 418:	a9 cf       	rjmp	.-174    	; 0x36c <pid_Controller+0x8a>
    pid_st->sumError = -pid_st->maxSumError;
  }
  else{
    pid_st->sumError = temp;
 41a:	22 83       	std	Z+2, r18	; 0x02
 41c:	33 83       	std	Z+3, r19	; 0x03
 41e:	44 83       	std	Z+4, r20	; 0x04
 420:	55 83       	std	Z+5, r21	; 0x05
    i_term = pid_st->I_Factor * pid_st->sumError;
 422:	a0 85       	ldd	r26, Z+8	; 0x08
 424:	b1 85       	ldd	r27, Z+9	; 0x09
 426:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__mulshisi3>
 42a:	a0 cf       	rjmp	.-192    	; 0x36c <pid_Controller+0x8a>
 42c:	86 81       	ldd	r24, Z+6	; 0x06
 42e:	97 81       	ldd	r25, Z+7	; 0x07
 430:	48 9f       	mul	r20, r24
 432:	60 01       	movw	r12, r0
 434:	49 9f       	mul	r20, r25
 436:	d0 0c       	add	r13, r0
 438:	58 9f       	mul	r21, r24
 43a:	d0 0c       	add	r13, r0
 43c:	11 24       	eor	r1, r1
 43e:	0d 2c       	mov	r0, r13
 440:	00 0c       	add	r0, r0
 442:	ee 08       	sbc	r14, r14
 444:	ff 08       	sbc	r15, r15
 446:	72 cf       	rjmp	.-284    	; 0x32c <pid_Controller+0x4a>
  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);

  pid_st->lastProcessValue = processValue;

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 448:	81 58       	subi	r24, 0x81	; 129
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	af 4f       	sbci	r26, 0xFF	; 255
 44e:	bf 4f       	sbci	r27, 0xFF	; 255
 450:	ac cf       	rjmp	.-168    	; 0x3aa <pid_Controller+0xc8>

00000452 <pid_Reset_Integrator>:
 452:	fc 01       	movw	r30, r24
 454:	12 82       	std	Z+2, r1	; 0x02
 456:	13 82       	std	Z+3, r1	; 0x03
 458:	14 82       	std	Z+4, r1	; 0x04
 45a:	15 82       	std	Z+5, r1	; 0x05
 45c:	08 95       	ret

0000045e <main>:

/*! \brief Init of PID controller demo
 */
void Init(void)
{
  pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR , K_D * SCALING_FACTOR , &pidData);
 45e:	26 e4       	ldi	r18, 0x46	; 70
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e8       	ldi	r22, 0x80	; 128
 468:	72 e0       	ldi	r23, 0x02	; 2
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	9a e0       	ldi	r25, 0x0A	; 10
 46e:	0e 94 44 01 	call	0x288	; 0x288 <pid_Init>

  // Set up timer, enable timer/counte 0 overflow interrupt
  TCCR0B = _BV(CS00);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0);
 476:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  TCNT0 = 0;
 47a:	16 bc       	out	0x26, r1	; 38

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 47c:	87 e6       	ldi	r24, 0x67	; 103
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 484:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 488:	88 e1       	ldi	r24, 0x18	; 24
 48a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 48e:	86 e0       	ldi	r24, 0x06	; 6
 490:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
{
  int16_t referenceValue, measurementValue, inputValue;
  Init();
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 494:	88 e3       	ldi	r24, 0x38	; 56
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	23 e5       	ldi	r18, 0x53	; 83
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <uart_file+0x9>
 4a0:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <uart_file+0x8>
 4a4:	2c e5       	ldi	r18, 0x5C	; 92
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <uart_file+0xb>
 4ac:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <uart_file+0xa>
 4b0:	23 e0       	ldi	r18, 0x03	; 3
 4b2:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <uart_file+0x3>
 4b6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <uart_file+0xd>
 4ba:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <uart_file+0xc>
  stdin = stdout = stderr = &uart_file;
 4be:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__iob+0x5>
 4c2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__iob+0x4>
 4c6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__iob+0x3>
 4ca:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__iob+0x2>
 4ce:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <__iob+0x1>
 4d2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__iob>
}

// inicjalizacja ADC
void adc_init()
{
  ADMUX = _BV(REFS0) | _BV(REFS1);
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  DIDR0   = _BV(ADC0D) | _BV(ADC1D); // wyłącz wejście cyfrowe na ADC0
 4dc:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
 4e0:	87 e0       	ldi	r24, 0x07	; 7
 4e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRA |= _BV(ADEN); // włącz ADC
 4e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 4ea:	80 68       	ori	r24, 0x80	; 128
 4ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
  stdin = stdout = stderr = &uart_file;
  // zainicjalizuj ADC
  adc_init();
  // mierz napięcie
  LED_DDR |= _BV(LED);
 4f0:	25 9a       	sbi	0x04, 5	; 4
  sei();
 4f2:	78 94       	sei
 *
 * This function must return the measured data
 */
int16_t Get_Measurement(void)
{
  ADMUX = _BV(REFS0) | _BV(REFS1) | _BV(MUX0);
 4f4:	31 ec       	ldi	r19, 0xC1	; 193
 4f6:	c3 2e       	mov	r12, r19
 * This function must return the reference value.
 * May be constant or varying
 */
int16_t Get_Reference(void)
{
  ADMUX = _BV(REFS0);
 4f8:	40 e4       	ldi	r20, 0x40	; 64
 4fa:	d4 2e       	mov	r13, r20
      referenceValue = Get_Reference();
      

      inputValue = pid_Controller(referenceValue, measurementValue, &pidData);

      printf("%"PRId16" -> %"PRId16"   PID: %"PRId16"\r\n", measurementValue, referenceValue, inputValue);
 4fc:	01 e2       	ldi	r16, 0x21	; 33
 4fe:	11 e0       	ldi	r17, 0x01	; 1
  LED_DDR |= _BV(LED);
  sei();

  while(1){
    // Run PID calculations once every PID timer timeout
    if(gFlags.pidTimer)
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 504:	80 ff       	sbrs	r24, 0
 506:	7e c0       	rjmp	.+252    	; 0x604 <main+0x1a6>
 *
 * This function must return the measured data
 */
int16_t Get_Measurement(void)
{
  ADMUX = _BV(REFS0) | _BV(REFS1) | _BV(MUX0);
 508:	c0 92 7c 00 	sts	0x007C, r12	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 50c:	2f ef       	ldi	r18, 0xFF	; 255
 50e:	82 e5       	ldi	r24, 0x52	; 82
 510:	97 e0       	ldi	r25, 0x07	; 7
 512:	21 50       	subi	r18, 0x01	; 1
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	90 40       	sbci	r25, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0xb4>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0xbe>
 51c:	00 00       	nop
  _delay_ms(150);
  ADCSRA |= _BV(ADSC); // wykonaj konwersję
 51e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 522:	80 64       	ori	r24, 0x40	; 64
 524:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
 528:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 52c:	84 ff       	sbrs	r24, 4
 52e:	fc cf       	rjmp	.-8      	; 0x528 <main+0xca>
  ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)
 530:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 534:	80 61       	ori	r24, 0x10	; 16
 536:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  int16_t tempe = ((ADC* (1100/1024)) - 500) / 10;
 53a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 53e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 542:	24 5f       	subi	r18, 0xF4	; 244
 544:	31 40       	sbci	r19, 0x01	; 1
 546:	ad ec       	ldi	r26, 0xCD	; 205
 548:	bc ec       	ldi	r27, 0xCC	; 204
 54a:	0e 94 4d 03 	call	0x69a	; 0x69a <__umulhisi3>
 54e:	7c 01       	movw	r14, r24
 550:	f6 94       	lsr	r15
 552:	e7 94       	ror	r14
 554:	f6 94       	lsr	r15
 556:	e7 94       	ror	r14
 558:	f6 94       	lsr	r15
 55a:	e7 94       	ror	r14
 * This function must return the reference value.
 * May be constant or varying
 */
int16_t Get_Reference(void)
{
  ADMUX = _BV(REFS0);
 55c:	d0 92 7c 00 	sts	0x007C, r13	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA |= _BV(ADSC); // wykonaj konwersję
 560:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 564:	80 64       	ori	r24, 0x40	; 64
 566:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while (!(ADCSRA & _BV(ADIF))); // czekaj na wynik
 56a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 56e:	84 ff       	sbrs	r24, 4
 570:	fc cf       	rjmp	.-8      	; 0x56a <main+0x10c>
  ADCSRA |= _BV(ADIF); // wyczyść bit ADIF (pisząc 1!)
 572:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 576:	80 61       	ori	r24, 0x10	; 16
 578:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  return temps[ADC>>6];
 57c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 580:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 584:	00 24       	eor	r0, r0
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	00 1c       	adc	r0, r0
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	00 1c       	adc	r0, r0
 592:	ef 2f       	mov	r30, r31
 594:	f0 2d       	mov	r31, r0
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	ef 5f       	subi	r30, 0xFF	; 255
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	b0 80       	ld	r11, Z
 5a0:	a1 80       	ldd	r10, Z+1	; 0x01
    {
      measurementValue = Get_Measurement();
      referenceValue = Get_Reference();
      

      inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
 5a2:	46 e4       	ldi	r20, 0x46	; 70
 5a4:	51 e0       	ldi	r21, 0x01	; 1
 5a6:	b7 01       	movw	r22, r14
 5a8:	8b 2d       	mov	r24, r11
 5aa:	9a 2d       	mov	r25, r10
 5ac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <pid_Controller>
 5b0:	ec 01       	movw	r28, r24

      printf("%"PRId16" -> %"PRId16"   PID: %"PRId16"\r\n", measurementValue, referenceValue, inputValue);
 5b2:	df 93       	push	r29
 5b4:	8f 93       	push	r24
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	ff 92       	push	r15
 5bc:	ef 92       	push	r14
 5be:	1f 93       	push	r17
 5c0:	0f 93       	push	r16
 5c2:	0e 94 a5 03 	call	0x74a	; 0x74a <printf>
  }
}

void Set_Input(int16_t inputValue)
{
  if (inputValue < 0) {
 5c6:	8d b7       	in	r24, 0x3d	; 61
 5c8:	9e b7       	in	r25, 0x3e	; 62
 5ca:	08 96       	adiw	r24, 0x08	; 8
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	9e bf       	out	0x3e, r25	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	8d bf       	out	0x3d, r24	; 61
 5d6:	d7 fd       	sbrc	r29, 7
 5d8:	1c c0       	rjmp	.+56     	; 0x612 <main+0x1b4>
     meine_delete(inputValue * -1);
  }
  else{
    LED_PORT |= _BV(LED);
 5da:	2d 9a       	sbi	0x05, 5	; 5
 * Set the output from the controller as input
 * to system.
 */

void meine_delete(int16_t inputValue) {
  for (uint16_t i=0; i<inputValue; i++) {
 5dc:	20 97       	sbiw	r28, 0x00	; 0
 5de:	61 f0       	breq	.+24     	; 0x5f8 <main+0x19a>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	ef e9       	ldi	r30, 0x9F	; 159
 5e6:	ff e0       	ldi	r31, 0x0F	; 15
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <main+0x18a>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0x190>
 5ee:	00 00       	nop
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	8c 17       	cp	r24, r28
 5f4:	9d 07       	cpc	r25, r29
 5f6:	b1 f7       	brne	.-20     	; 0x5e4 <main+0x186>
     meine_delete(inputValue * -1);
  }
  else{
    LED_PORT |= _BV(LED);
    meine_delete(inputValue);
    LED_PORT &= ~_BV(LED);
 5f8:	2d 98       	cbi	0x05, 5	; 5

      printf("%"PRId16" -> %"PRId16"   PID: %"PRId16"\r\n", measurementValue, referenceValue, inputValue);

      Set_Input(inputValue);

      gFlags.pidTimer = FALSE;
 5fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 604:	8f e3       	ldi	r24, 0x3F	; 63
 606:	9c e9       	ldi	r25, 0x9C	; 156
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <main+0x1aa>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x1b0>
 60e:	00 00       	nop
 610:	77 cf       	rjmp	.-274    	; 0x500 <main+0xa2>
}

void Set_Input(int16_t inputValue)
{
  if (inputValue < 0) {
     meine_delete(inputValue * -1);
 612:	d1 95       	neg	r29
 614:	c1 95       	neg	r28
 616:	d1 09       	sbc	r29, r1
 * Set the output from the controller as input
 * to system.
 */

void meine_delete(int16_t inputValue) {
  for (uint16_t i=0; i<inputValue; i++) {
 618:	81 f3       	breq	.-32     	; 0x5fa <main+0x19c>
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	ef e9       	ldi	r30, 0x9F	; 159
 620:	ff e0       	ldi	r31, 0x0F	; 15
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <main+0x1c4>
 626:	00 c0       	rjmp	.+0      	; 0x628 <main+0x1ca>
 628:	00 00       	nop
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	8c 17       	cp	r24, r28
 62e:	9d 07       	cpc	r25, r29
 630:	b1 f7       	brne	.-20     	; 0x61e <main+0x1c0>
 632:	e3 cf       	rjmp	.-58     	; 0x5fa <main+0x19c>

00000634 <__divmodhi4>:
 634:	97 fb       	bst	r25, 7
 636:	07 2e       	mov	r0, r23
 638:	16 f4       	brtc	.+4      	; 0x63e <__divmodhi4+0xa>
 63a:	00 94       	com	r0
 63c:	07 d0       	rcall	.+14     	; 0x64c <__divmodhi4_neg1>
 63e:	77 fd       	sbrc	r23, 7
 640:	09 d0       	rcall	.+18     	; 0x654 <__divmodhi4_neg2>
 642:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodhi4>
 646:	07 fc       	sbrc	r0, 7
 648:	05 d0       	rcall	.+10     	; 0x654 <__divmodhi4_neg2>
 64a:	3e f4       	brtc	.+14     	; 0x65a <__divmodhi4_exit>

0000064c <__divmodhi4_neg1>:
 64c:	90 95       	com	r25
 64e:	81 95       	neg	r24
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__divmodhi4_neg2>:
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255

0000065a <__divmodhi4_exit>:
 65a:	08 95       	ret

0000065c <__divmodsi4>:
 65c:	05 2e       	mov	r0, r21
 65e:	97 fb       	bst	r25, 7
 660:	1e f4       	brtc	.+6      	; 0x668 <__divmodsi4+0xc>
 662:	00 94       	com	r0
 664:	0e 94 45 03 	call	0x68a	; 0x68a <__negsi2>
 668:	57 fd       	sbrc	r21, 7
 66a:	07 d0       	rcall	.+14     	; 0x67a <__divmodsi4_neg2>
 66c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__udivmodsi4>
 670:	07 fc       	sbrc	r0, 7
 672:	03 d0       	rcall	.+6      	; 0x67a <__divmodsi4_neg2>
 674:	4e f4       	brtc	.+18     	; 0x688 <__divmodsi4_exit>
 676:	0c 94 45 03 	jmp	0x68a	; 0x68a <__negsi2>

0000067a <__divmodsi4_neg2>:
 67a:	50 95       	com	r21
 67c:	40 95       	com	r20
 67e:	30 95       	com	r19
 680:	21 95       	neg	r18
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	4f 4f       	sbci	r20, 0xFF	; 255
 686:	5f 4f       	sbci	r21, 0xFF	; 255

00000688 <__divmodsi4_exit>:
 688:	08 95       	ret

0000068a <__negsi2>:
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__umulhisi3>:
 69a:	a2 9f       	mul	r26, r18
 69c:	b0 01       	movw	r22, r0
 69e:	b3 9f       	mul	r27, r19
 6a0:	c0 01       	movw	r24, r0
 6a2:	a3 9f       	mul	r26, r19
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	b2 9f       	mul	r27, r18
 6ae:	70 0d       	add	r23, r0
 6b0:	81 1d       	adc	r24, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	91 1d       	adc	r25, r1
 6b6:	08 95       	ret

000006b8 <__mulshisi3>:
 6b8:	b7 ff       	sbrs	r27, 7
 6ba:	0c 94 9a 03 	jmp	0x734	; 0x734 <__muluhisi3>

000006be <__mulohisi3>:
 6be:	0e 94 9a 03 	call	0x734	; 0x734 <__muluhisi3>
 6c2:	82 1b       	sub	r24, r18
 6c4:	93 0b       	sbc	r25, r19
 6c6:	08 95       	ret

000006c8 <__udivmodhi4>:
 6c8:	aa 1b       	sub	r26, r26
 6ca:	bb 1b       	sub	r27, r27
 6cc:	51 e1       	ldi	r21, 0x11	; 17
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <__udivmodhi4_ep>

000006d0 <__udivmodhi4_loop>:
 6d0:	aa 1f       	adc	r26, r26
 6d2:	bb 1f       	adc	r27, r27
 6d4:	a6 17       	cp	r26, r22
 6d6:	b7 07       	cpc	r27, r23
 6d8:	10 f0       	brcs	.+4      	; 0x6de <__udivmodhi4_ep>
 6da:	a6 1b       	sub	r26, r22
 6dc:	b7 0b       	sbc	r27, r23

000006de <__udivmodhi4_ep>:
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	5a 95       	dec	r21
 6e4:	a9 f7       	brne	.-22     	; 0x6d0 <__udivmodhi4_loop>
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	bc 01       	movw	r22, r24
 6ec:	cd 01       	movw	r24, r26
 6ee:	08 95       	ret

000006f0 <__udivmodsi4>:
 6f0:	a1 e2       	ldi	r26, 0x21	; 33
 6f2:	1a 2e       	mov	r1, r26
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	fd 01       	movw	r30, r26
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <__udivmodsi4_ep>

000006fc <__udivmodsi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	ee 1f       	adc	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	a2 17       	cp	r26, r18
 706:	b3 07       	cpc	r27, r19
 708:	e4 07       	cpc	r30, r20
 70a:	f5 07       	cpc	r31, r21
 70c:	20 f0       	brcs	.+8      	; 0x716 <__udivmodsi4_ep>
 70e:	a2 1b       	sub	r26, r18
 710:	b3 0b       	sbc	r27, r19
 712:	e4 0b       	sbc	r30, r20
 714:	f5 0b       	sbc	r31, r21

00000716 <__udivmodsi4_ep>:
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a 94       	dec	r1
 720:	69 f7       	brne	.-38     	; 0x6fc <__udivmodsi4_loop>
 722:	60 95       	com	r22
 724:	70 95       	com	r23
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	9b 01       	movw	r18, r22
 72c:	ac 01       	movw	r20, r24
 72e:	bd 01       	movw	r22, r26
 730:	cf 01       	movw	r24, r30
 732:	08 95       	ret

00000734 <__muluhisi3>:
 734:	0e 94 4d 03 	call	0x69a	; 0x69a <__umulhisi3>
 738:	a5 9f       	mul	r26, r21
 73a:	90 0d       	add	r25, r0
 73c:	b4 9f       	mul	r27, r20
 73e:	90 0d       	add	r25, r0
 740:	a4 9f       	mul	r26, r20
 742:	80 0d       	add	r24, r0
 744:	91 1d       	adc	r25, r1
 746:	11 24       	eor	r1, r1
 748:	08 95       	ret

0000074a <printf>:
 74a:	a0 e0       	ldi	r26, 0x00	; 0
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	eb ea       	ldi	r30, 0xAB	; 171
 750:	f3 e0       	ldi	r31, 0x03	; 3
 752:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__prologue_saves__+0x20>
 756:	ae 01       	movw	r20, r28
 758:	4b 5f       	subi	r20, 0xFB	; 251
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	fa 01       	movw	r30, r20
 75e:	61 91       	ld	r22, Z+
 760:	71 91       	ld	r23, Z+
 762:	af 01       	movw	r20, r30
 764:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__iob+0x2>
 768:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__iob+0x3>
 76c:	0e 94 bb 03 	call	0x776	; 0x776 <vfprintf>
 770:	e2 e0       	ldi	r30, 0x02	; 2
 772:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__epilogue_restores__+0x20>

00000776 <vfprintf>:
 776:	ab e0       	ldi	r26, 0x0B	; 11
 778:	b0 e0       	ldi	r27, 0x00	; 0
 77a:	e1 ec       	ldi	r30, 0xC1	; 193
 77c:	f3 e0       	ldi	r31, 0x03	; 3
 77e:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__prologue_saves__>
 782:	6c 01       	movw	r12, r24
 784:	7b 01       	movw	r14, r22
 786:	8a 01       	movw	r16, r20
 788:	fc 01       	movw	r30, r24
 78a:	17 82       	std	Z+7, r1	; 0x07
 78c:	16 82       	std	Z+6, r1	; 0x06
 78e:	83 81       	ldd	r24, Z+3	; 0x03
 790:	81 ff       	sbrs	r24, 1
 792:	cc c1       	rjmp	.+920    	; 0xb2c <__stack+0x22d>
 794:	ce 01       	movw	r24, r28
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	3c 01       	movw	r6, r24
 79a:	f6 01       	movw	r30, r12
 79c:	93 81       	ldd	r25, Z+3	; 0x03
 79e:	f7 01       	movw	r30, r14
 7a0:	93 fd       	sbrc	r25, 3
 7a2:	85 91       	lpm	r24, Z+
 7a4:	93 ff       	sbrs	r25, 3
 7a6:	81 91       	ld	r24, Z+
 7a8:	7f 01       	movw	r14, r30
 7aa:	88 23       	and	r24, r24
 7ac:	09 f4       	brne	.+2      	; 0x7b0 <vfprintf+0x3a>
 7ae:	ba c1       	rjmp	.+884    	; 0xb24 <__stack+0x225>
 7b0:	85 32       	cpi	r24, 0x25	; 37
 7b2:	39 f4       	brne	.+14     	; 0x7c2 <vfprintf+0x4c>
 7b4:	93 fd       	sbrc	r25, 3
 7b6:	85 91       	lpm	r24, Z+
 7b8:	93 ff       	sbrs	r25, 3
 7ba:	81 91       	ld	r24, Z+
 7bc:	7f 01       	movw	r14, r30
 7be:	85 32       	cpi	r24, 0x25	; 37
 7c0:	29 f4       	brne	.+10     	; 0x7cc <vfprintf+0x56>
 7c2:	b6 01       	movw	r22, r12
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 7ca:	e7 cf       	rjmp	.-50     	; 0x79a <vfprintf+0x24>
 7cc:	91 2c       	mov	r9, r1
 7ce:	21 2c       	mov	r2, r1
 7d0:	31 2c       	mov	r3, r1
 7d2:	ff e1       	ldi	r31, 0x1F	; 31
 7d4:	f3 15       	cp	r31, r3
 7d6:	d8 f0       	brcs	.+54     	; 0x80e <vfprintf+0x98>
 7d8:	8b 32       	cpi	r24, 0x2B	; 43
 7da:	79 f0       	breq	.+30     	; 0x7fa <vfprintf+0x84>
 7dc:	38 f4       	brcc	.+14     	; 0x7ec <vfprintf+0x76>
 7de:	80 32       	cpi	r24, 0x20	; 32
 7e0:	79 f0       	breq	.+30     	; 0x800 <vfprintf+0x8a>
 7e2:	83 32       	cpi	r24, 0x23	; 35
 7e4:	a1 f4       	brne	.+40     	; 0x80e <vfprintf+0x98>
 7e6:	23 2d       	mov	r18, r3
 7e8:	20 61       	ori	r18, 0x10	; 16
 7ea:	1d c0       	rjmp	.+58     	; 0x826 <vfprintf+0xb0>
 7ec:	8d 32       	cpi	r24, 0x2D	; 45
 7ee:	61 f0       	breq	.+24     	; 0x808 <vfprintf+0x92>
 7f0:	80 33       	cpi	r24, 0x30	; 48
 7f2:	69 f4       	brne	.+26     	; 0x80e <vfprintf+0x98>
 7f4:	23 2d       	mov	r18, r3
 7f6:	21 60       	ori	r18, 0x01	; 1
 7f8:	16 c0       	rjmp	.+44     	; 0x826 <vfprintf+0xb0>
 7fa:	83 2d       	mov	r24, r3
 7fc:	82 60       	ori	r24, 0x02	; 2
 7fe:	38 2e       	mov	r3, r24
 800:	e3 2d       	mov	r30, r3
 802:	e4 60       	ori	r30, 0x04	; 4
 804:	3e 2e       	mov	r3, r30
 806:	2a c0       	rjmp	.+84     	; 0x85c <vfprintf+0xe6>
 808:	f3 2d       	mov	r31, r3
 80a:	f8 60       	ori	r31, 0x08	; 8
 80c:	1d c0       	rjmp	.+58     	; 0x848 <vfprintf+0xd2>
 80e:	37 fc       	sbrc	r3, 7
 810:	2d c0       	rjmp	.+90     	; 0x86c <vfprintf+0xf6>
 812:	20 ed       	ldi	r18, 0xD0	; 208
 814:	28 0f       	add	r18, r24
 816:	2a 30       	cpi	r18, 0x0A	; 10
 818:	40 f0       	brcs	.+16     	; 0x82a <vfprintf+0xb4>
 81a:	8e 32       	cpi	r24, 0x2E	; 46
 81c:	b9 f4       	brne	.+46     	; 0x84c <vfprintf+0xd6>
 81e:	36 fc       	sbrc	r3, 6
 820:	81 c1       	rjmp	.+770    	; 0xb24 <__stack+0x225>
 822:	23 2d       	mov	r18, r3
 824:	20 64       	ori	r18, 0x40	; 64
 826:	32 2e       	mov	r3, r18
 828:	19 c0       	rjmp	.+50     	; 0x85c <vfprintf+0xe6>
 82a:	36 fe       	sbrs	r3, 6
 82c:	06 c0       	rjmp	.+12     	; 0x83a <vfprintf+0xc4>
 82e:	8a e0       	ldi	r24, 0x0A	; 10
 830:	98 9e       	mul	r9, r24
 832:	20 0d       	add	r18, r0
 834:	11 24       	eor	r1, r1
 836:	92 2e       	mov	r9, r18
 838:	11 c0       	rjmp	.+34     	; 0x85c <vfprintf+0xe6>
 83a:	ea e0       	ldi	r30, 0x0A	; 10
 83c:	2e 9e       	mul	r2, r30
 83e:	20 0d       	add	r18, r0
 840:	11 24       	eor	r1, r1
 842:	22 2e       	mov	r2, r18
 844:	f3 2d       	mov	r31, r3
 846:	f0 62       	ori	r31, 0x20	; 32
 848:	3f 2e       	mov	r3, r31
 84a:	08 c0       	rjmp	.+16     	; 0x85c <vfprintf+0xe6>
 84c:	8c 36       	cpi	r24, 0x6C	; 108
 84e:	21 f4       	brne	.+8      	; 0x858 <vfprintf+0xe2>
 850:	83 2d       	mov	r24, r3
 852:	80 68       	ori	r24, 0x80	; 128
 854:	38 2e       	mov	r3, r24
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0xe6>
 858:	88 36       	cpi	r24, 0x68	; 104
 85a:	41 f4       	brne	.+16     	; 0x86c <vfprintf+0xf6>
 85c:	f7 01       	movw	r30, r14
 85e:	93 fd       	sbrc	r25, 3
 860:	85 91       	lpm	r24, Z+
 862:	93 ff       	sbrs	r25, 3
 864:	81 91       	ld	r24, Z+
 866:	7f 01       	movw	r14, r30
 868:	81 11       	cpse	r24, r1
 86a:	b3 cf       	rjmp	.-154    	; 0x7d2 <vfprintf+0x5c>
 86c:	98 2f       	mov	r25, r24
 86e:	9f 7d       	andi	r25, 0xDF	; 223
 870:	95 54       	subi	r25, 0x45	; 69
 872:	93 30       	cpi	r25, 0x03	; 3
 874:	28 f4       	brcc	.+10     	; 0x880 <vfprintf+0x10a>
 876:	0c 5f       	subi	r16, 0xFC	; 252
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	9f e3       	ldi	r25, 0x3F	; 63
 87c:	99 83       	std	Y+1, r25	; 0x01
 87e:	0d c0       	rjmp	.+26     	; 0x89a <vfprintf+0x124>
 880:	83 36       	cpi	r24, 0x63	; 99
 882:	31 f0       	breq	.+12     	; 0x890 <vfprintf+0x11a>
 884:	83 37       	cpi	r24, 0x73	; 115
 886:	71 f0       	breq	.+28     	; 0x8a4 <vfprintf+0x12e>
 888:	83 35       	cpi	r24, 0x53	; 83
 88a:	09 f0       	breq	.+2      	; 0x88e <vfprintf+0x118>
 88c:	59 c0       	rjmp	.+178    	; 0x940 <__stack+0x41>
 88e:	21 c0       	rjmp	.+66     	; 0x8d2 <vfprintf+0x15c>
 890:	f8 01       	movw	r30, r16
 892:	80 81       	ld	r24, Z
 894:	89 83       	std	Y+1, r24	; 0x01
 896:	0e 5f       	subi	r16, 0xFE	; 254
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	88 24       	eor	r8, r8
 89c:	83 94       	inc	r8
 89e:	91 2c       	mov	r9, r1
 8a0:	53 01       	movw	r10, r6
 8a2:	13 c0       	rjmp	.+38     	; 0x8ca <vfprintf+0x154>
 8a4:	28 01       	movw	r4, r16
 8a6:	f2 e0       	ldi	r31, 0x02	; 2
 8a8:	4f 0e       	add	r4, r31
 8aa:	51 1c       	adc	r5, r1
 8ac:	f8 01       	movw	r30, r16
 8ae:	a0 80       	ld	r10, Z
 8b0:	b1 80       	ldd	r11, Z+1	; 0x01
 8b2:	36 fe       	sbrs	r3, 6
 8b4:	03 c0       	rjmp	.+6      	; 0x8bc <vfprintf+0x146>
 8b6:	69 2d       	mov	r22, r9
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0x14a>
 8bc:	6f ef       	ldi	r22, 0xFF	; 255
 8be:	7f ef       	ldi	r23, 0xFF	; 255
 8c0:	c5 01       	movw	r24, r10
 8c2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <strnlen>
 8c6:	4c 01       	movw	r8, r24
 8c8:	82 01       	movw	r16, r4
 8ca:	f3 2d       	mov	r31, r3
 8cc:	ff 77       	andi	r31, 0x7F	; 127
 8ce:	3f 2e       	mov	r3, r31
 8d0:	16 c0       	rjmp	.+44     	; 0x8fe <vfprintf+0x188>
 8d2:	28 01       	movw	r4, r16
 8d4:	22 e0       	ldi	r18, 0x02	; 2
 8d6:	42 0e       	add	r4, r18
 8d8:	51 1c       	adc	r5, r1
 8da:	f8 01       	movw	r30, r16
 8dc:	a0 80       	ld	r10, Z
 8de:	b1 80       	ldd	r11, Z+1	; 0x01
 8e0:	36 fe       	sbrs	r3, 6
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <vfprintf+0x174>
 8e4:	69 2d       	mov	r22, r9
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x178>
 8ea:	6f ef       	ldi	r22, 0xFF	; 255
 8ec:	7f ef       	ldi	r23, 0xFF	; 255
 8ee:	c5 01       	movw	r24, r10
 8f0:	0e 94 9c 05 	call	0xb38	; 0xb38 <strnlen_P>
 8f4:	4c 01       	movw	r8, r24
 8f6:	f3 2d       	mov	r31, r3
 8f8:	f0 68       	ori	r31, 0x80	; 128
 8fa:	3f 2e       	mov	r3, r31
 8fc:	82 01       	movw	r16, r4
 8fe:	33 fc       	sbrc	r3, 3
 900:	1b c0       	rjmp	.+54     	; 0x938 <__stack+0x39>
 902:	82 2d       	mov	r24, r2
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	88 16       	cp	r8, r24
 908:	99 06       	cpc	r9, r25
 90a:	b0 f4       	brcc	.+44     	; 0x938 <__stack+0x39>
 90c:	b6 01       	movw	r22, r12
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 916:	2a 94       	dec	r2
 918:	f4 cf       	rjmp	.-24     	; 0x902 <__stack+0x3>
 91a:	f5 01       	movw	r30, r10
 91c:	37 fc       	sbrc	r3, 7
 91e:	85 91       	lpm	r24, Z+
 920:	37 fe       	sbrs	r3, 7
 922:	81 91       	ld	r24, Z+
 924:	5f 01       	movw	r10, r30
 926:	b6 01       	movw	r22, r12
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 92e:	21 10       	cpse	r2, r1
 930:	2a 94       	dec	r2
 932:	21 e0       	ldi	r18, 0x01	; 1
 934:	82 1a       	sub	r8, r18
 936:	91 08       	sbc	r9, r1
 938:	81 14       	cp	r8, r1
 93a:	91 04       	cpc	r9, r1
 93c:	71 f7       	brne	.-36     	; 0x91a <__stack+0x1b>
 93e:	e8 c0       	rjmp	.+464    	; 0xb10 <__stack+0x211>
 940:	84 36       	cpi	r24, 0x64	; 100
 942:	11 f0       	breq	.+4      	; 0x948 <__stack+0x49>
 944:	89 36       	cpi	r24, 0x69	; 105
 946:	41 f5       	brne	.+80     	; 0x998 <__stack+0x99>
 948:	f8 01       	movw	r30, r16
 94a:	37 fe       	sbrs	r3, 7
 94c:	07 c0       	rjmp	.+14     	; 0x95c <__stack+0x5d>
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	82 81       	ldd	r24, Z+2	; 0x02
 954:	93 81       	ldd	r25, Z+3	; 0x03
 956:	0c 5f       	subi	r16, 0xFC	; 252
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	08 c0       	rjmp	.+16     	; 0x96c <__stack+0x6d>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	07 2e       	mov	r0, r23
 962:	00 0c       	add	r0, r0
 964:	88 0b       	sbc	r24, r24
 966:	99 0b       	sbc	r25, r25
 968:	0e 5f       	subi	r16, 0xFE	; 254
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	f3 2d       	mov	r31, r3
 96e:	ff 76       	andi	r31, 0x6F	; 111
 970:	3f 2e       	mov	r3, r31
 972:	97 ff       	sbrs	r25, 7
 974:	09 c0       	rjmp	.+18     	; 0x988 <__stack+0x89>
 976:	90 95       	com	r25
 978:	80 95       	com	r24
 97a:	70 95       	com	r23
 97c:	61 95       	neg	r22
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	f0 68       	ori	r31, 0x80	; 128
 986:	3f 2e       	mov	r3, r31
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	a3 01       	movw	r20, r6
 98e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__ultoa_invert>
 992:	88 2e       	mov	r8, r24
 994:	86 18       	sub	r8, r6
 996:	45 c0       	rjmp	.+138    	; 0xa22 <__stack+0x123>
 998:	85 37       	cpi	r24, 0x75	; 117
 99a:	31 f4       	brne	.+12     	; 0x9a8 <__stack+0xa9>
 99c:	23 2d       	mov	r18, r3
 99e:	2f 7e       	andi	r18, 0xEF	; 239
 9a0:	b2 2e       	mov	r11, r18
 9a2:	2a e0       	ldi	r18, 0x0A	; 10
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	25 c0       	rjmp	.+74     	; 0x9f2 <__stack+0xf3>
 9a8:	93 2d       	mov	r25, r3
 9aa:	99 7f       	andi	r25, 0xF9	; 249
 9ac:	b9 2e       	mov	r11, r25
 9ae:	8f 36       	cpi	r24, 0x6F	; 111
 9b0:	c1 f0       	breq	.+48     	; 0x9e2 <__stack+0xe3>
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <__stack+0xbb>
 9b4:	88 35       	cpi	r24, 0x58	; 88
 9b6:	79 f0       	breq	.+30     	; 0x9d6 <__stack+0xd7>
 9b8:	b5 c0       	rjmp	.+362    	; 0xb24 <__stack+0x225>
 9ba:	80 37       	cpi	r24, 0x70	; 112
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <__stack+0xc5>
 9be:	88 37       	cpi	r24, 0x78	; 120
 9c0:	21 f0       	breq	.+8      	; 0x9ca <__stack+0xcb>
 9c2:	b0 c0       	rjmp	.+352    	; 0xb24 <__stack+0x225>
 9c4:	e9 2f       	mov	r30, r25
 9c6:	e0 61       	ori	r30, 0x10	; 16
 9c8:	be 2e       	mov	r11, r30
 9ca:	b4 fe       	sbrs	r11, 4
 9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__stack+0xe9>
 9ce:	fb 2d       	mov	r31, r11
 9d0:	f4 60       	ori	r31, 0x04	; 4
 9d2:	bf 2e       	mov	r11, r31
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0xe9>
 9d6:	34 fe       	sbrs	r3, 4
 9d8:	0a c0       	rjmp	.+20     	; 0x9ee <__stack+0xef>
 9da:	29 2f       	mov	r18, r25
 9dc:	26 60       	ori	r18, 0x06	; 6
 9de:	b2 2e       	mov	r11, r18
 9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__stack+0xef>
 9e2:	28 e0       	ldi	r18, 0x08	; 8
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__stack+0xf3>
 9e8:	20 e1       	ldi	r18, 0x10	; 16
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <__stack+0xf3>
 9ee:	20 e1       	ldi	r18, 0x10	; 16
 9f0:	32 e0       	ldi	r19, 0x02	; 2
 9f2:	f8 01       	movw	r30, r16
 9f4:	b7 fe       	sbrs	r11, 7
 9f6:	07 c0       	rjmp	.+14     	; 0xa06 <__stack+0x107>
 9f8:	60 81       	ld	r22, Z
 9fa:	71 81       	ldd	r23, Z+1	; 0x01
 9fc:	82 81       	ldd	r24, Z+2	; 0x02
 9fe:	93 81       	ldd	r25, Z+3	; 0x03
 a00:	0c 5f       	subi	r16, 0xFC	; 252
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <__stack+0x113>
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 5f       	subi	r16, 0xFE	; 254
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	a3 01       	movw	r20, r6
 a14:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__ultoa_invert>
 a18:	88 2e       	mov	r8, r24
 a1a:	86 18       	sub	r8, r6
 a1c:	fb 2d       	mov	r31, r11
 a1e:	ff 77       	andi	r31, 0x7F	; 127
 a20:	3f 2e       	mov	r3, r31
 a22:	36 fe       	sbrs	r3, 6
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <__stack+0x141>
 a26:	23 2d       	mov	r18, r3
 a28:	2e 7f       	andi	r18, 0xFE	; 254
 a2a:	a2 2e       	mov	r10, r18
 a2c:	89 14       	cp	r8, r9
 a2e:	58 f4       	brcc	.+22     	; 0xa46 <__stack+0x147>
 a30:	34 fe       	sbrs	r3, 4
 a32:	0b c0       	rjmp	.+22     	; 0xa4a <__stack+0x14b>
 a34:	32 fc       	sbrc	r3, 2
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <__stack+0x14b>
 a38:	83 2d       	mov	r24, r3
 a3a:	8e 7e       	andi	r24, 0xEE	; 238
 a3c:	a8 2e       	mov	r10, r24
 a3e:	05 c0       	rjmp	.+10     	; 0xa4a <__stack+0x14b>
 a40:	b8 2c       	mov	r11, r8
 a42:	a3 2c       	mov	r10, r3
 a44:	03 c0       	rjmp	.+6      	; 0xa4c <__stack+0x14d>
 a46:	b8 2c       	mov	r11, r8
 a48:	01 c0       	rjmp	.+2      	; 0xa4c <__stack+0x14d>
 a4a:	b9 2c       	mov	r11, r9
 a4c:	a4 fe       	sbrs	r10, 4
 a4e:	0f c0       	rjmp	.+30     	; 0xa6e <__stack+0x16f>
 a50:	fe 01       	movw	r30, r28
 a52:	e8 0d       	add	r30, r8
 a54:	f1 1d       	adc	r31, r1
 a56:	80 81       	ld	r24, Z
 a58:	80 33       	cpi	r24, 0x30	; 48
 a5a:	21 f4       	brne	.+8      	; 0xa64 <__stack+0x165>
 a5c:	9a 2d       	mov	r25, r10
 a5e:	99 7e       	andi	r25, 0xE9	; 233
 a60:	a9 2e       	mov	r10, r25
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <__stack+0x177>
 a64:	a2 fe       	sbrs	r10, 2
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <__stack+0x175>
 a68:	b3 94       	inc	r11
 a6a:	b3 94       	inc	r11
 a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__stack+0x177>
 a6e:	8a 2d       	mov	r24, r10
 a70:	86 78       	andi	r24, 0x86	; 134
 a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x177>
 a74:	b3 94       	inc	r11
 a76:	a3 fc       	sbrc	r10, 3
 a78:	11 c0       	rjmp	.+34     	; 0xa9c <__stack+0x19d>
 a7a:	a0 fe       	sbrs	r10, 0
 a7c:	06 c0       	rjmp	.+12     	; 0xa8a <__stack+0x18b>
 a7e:	b2 14       	cp	r11, r2
 a80:	88 f4       	brcc	.+34     	; 0xaa4 <__stack+0x1a5>
 a82:	28 0c       	add	r2, r8
 a84:	92 2c       	mov	r9, r2
 a86:	9b 18       	sub	r9, r11
 a88:	0e c0       	rjmp	.+28     	; 0xaa6 <__stack+0x1a7>
 a8a:	b2 14       	cp	r11, r2
 a8c:	60 f4       	brcc	.+24     	; 0xaa6 <__stack+0x1a7>
 a8e:	b6 01       	movw	r22, r12
 a90:	80 e2       	ldi	r24, 0x20	; 32
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 a98:	b3 94       	inc	r11
 a9a:	f7 cf       	rjmp	.-18     	; 0xa8a <__stack+0x18b>
 a9c:	b2 14       	cp	r11, r2
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <__stack+0x1a7>
 aa0:	2b 18       	sub	r2, r11
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <__stack+0x1a9>
 aa4:	98 2c       	mov	r9, r8
 aa6:	21 2c       	mov	r2, r1
 aa8:	a4 fe       	sbrs	r10, 4
 aaa:	10 c0       	rjmp	.+32     	; 0xacc <__stack+0x1cd>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 ab6:	a2 fe       	sbrs	r10, 2
 ab8:	17 c0       	rjmp	.+46     	; 0xae8 <__stack+0x1e9>
 aba:	a1 fc       	sbrc	r10, 1
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <__stack+0x1c5>
 abe:	88 e7       	ldi	r24, 0x78	; 120
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__stack+0x1c9>
 ac4:	88 e5       	ldi	r24, 0x58	; 88
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	b6 01       	movw	r22, r12
 aca:	0c c0       	rjmp	.+24     	; 0xae4 <__stack+0x1e5>
 acc:	8a 2d       	mov	r24, r10
 ace:	86 78       	andi	r24, 0x86	; 134
 ad0:	59 f0       	breq	.+22     	; 0xae8 <__stack+0x1e9>
 ad2:	a1 fe       	sbrs	r10, 1
 ad4:	02 c0       	rjmp	.+4      	; 0xada <__stack+0x1db>
 ad6:	8b e2       	ldi	r24, 0x2B	; 43
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <__stack+0x1dd>
 ada:	80 e2       	ldi	r24, 0x20	; 32
 adc:	a7 fc       	sbrc	r10, 7
 ade:	8d e2       	ldi	r24, 0x2D	; 45
 ae0:	b6 01       	movw	r22, r12
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 ae8:	89 14       	cp	r8, r9
 aea:	38 f4       	brcc	.+14     	; 0xafa <__stack+0x1fb>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e3       	ldi	r24, 0x30	; 48
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 af6:	9a 94       	dec	r9
 af8:	f7 cf       	rjmp	.-18     	; 0xae8 <__stack+0x1e9>
 afa:	8a 94       	dec	r8
 afc:	f3 01       	movw	r30, r6
 afe:	e8 0d       	add	r30, r8
 b00:	f1 1d       	adc	r31, r1
 b02:	80 81       	ld	r24, Z
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 b0c:	81 10       	cpse	r8, r1
 b0e:	f5 cf       	rjmp	.-22     	; 0xafa <__stack+0x1fb>
 b10:	22 20       	and	r2, r2
 b12:	09 f4       	brne	.+2      	; 0xb16 <__stack+0x217>
 b14:	42 ce       	rjmp	.-892    	; 0x79a <vfprintf+0x24>
 b16:	b6 01       	movw	r22, r12
 b18:	80 e2       	ldi	r24, 0x20	; 32
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 b2 05 	call	0xb64	; 0xb64 <fputc>
 b20:	2a 94       	dec	r2
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <__stack+0x211>
 b24:	f6 01       	movw	r30, r12
 b26:	86 81       	ldd	r24, Z+6	; 0x06
 b28:	97 81       	ldd	r25, Z+7	; 0x07
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x231>
 b2c:	8f ef       	ldi	r24, 0xFF	; 255
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	2b 96       	adiw	r28, 0x0b	; 11
 b32:	e2 e1       	ldi	r30, 0x12	; 18
 b34:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__epilogue_restores__>

00000b38 <strnlen_P>:
 b38:	fc 01       	movw	r30, r24
 b3a:	05 90       	lpm	r0, Z+
 b3c:	61 50       	subi	r22, 0x01	; 1
 b3e:	70 40       	sbci	r23, 0x00	; 0
 b40:	01 10       	cpse	r0, r1
 b42:	d8 f7       	brcc	.-10     	; 0xb3a <strnlen_P+0x2>
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	8e 0f       	add	r24, r30
 b4a:	9f 1f       	adc	r25, r31
 b4c:	08 95       	ret

00000b4e <strnlen>:
 b4e:	fc 01       	movw	r30, r24
 b50:	61 50       	subi	r22, 0x01	; 1
 b52:	70 40       	sbci	r23, 0x00	; 0
 b54:	01 90       	ld	r0, Z+
 b56:	01 10       	cpse	r0, r1
 b58:	d8 f7       	brcc	.-10     	; 0xb50 <strnlen+0x2>
 b5a:	80 95       	com	r24
 b5c:	90 95       	com	r25
 b5e:	8e 0f       	add	r24, r30
 b60:	9f 1f       	adc	r25, r31
 b62:	08 95       	ret

00000b64 <fputc>:
 b64:	0f 93       	push	r16
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	fb 01       	movw	r30, r22
 b6e:	23 81       	ldd	r18, Z+3	; 0x03
 b70:	21 fd       	sbrc	r18, 1
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <fputc+0x16>
 b74:	8f ef       	ldi	r24, 0xFF	; 255
 b76:	9f ef       	ldi	r25, 0xFF	; 255
 b78:	2c c0       	rjmp	.+88     	; 0xbd2 <fputc+0x6e>
 b7a:	22 ff       	sbrs	r18, 2
 b7c:	16 c0       	rjmp	.+44     	; 0xbaa <fputc+0x46>
 b7e:	46 81       	ldd	r20, Z+6	; 0x06
 b80:	57 81       	ldd	r21, Z+7	; 0x07
 b82:	24 81       	ldd	r18, Z+4	; 0x04
 b84:	35 81       	ldd	r19, Z+5	; 0x05
 b86:	42 17       	cp	r20, r18
 b88:	53 07       	cpc	r21, r19
 b8a:	44 f4       	brge	.+16     	; 0xb9c <fputc+0x38>
 b8c:	a0 81       	ld	r26, Z
 b8e:	b1 81       	ldd	r27, Z+1	; 0x01
 b90:	9d 01       	movw	r18, r26
 b92:	2f 5f       	subi	r18, 0xFF	; 255
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	31 83       	std	Z+1, r19	; 0x01
 b98:	20 83       	st	Z, r18
 b9a:	8c 93       	st	X, r24
 b9c:	26 81       	ldd	r18, Z+6	; 0x06
 b9e:	37 81       	ldd	r19, Z+7	; 0x07
 ba0:	2f 5f       	subi	r18, 0xFF	; 255
 ba2:	3f 4f       	sbci	r19, 0xFF	; 255
 ba4:	37 83       	std	Z+7, r19	; 0x07
 ba6:	26 83       	std	Z+6, r18	; 0x06
 ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <fputc+0x6e>
 baa:	8b 01       	movw	r16, r22
 bac:	ec 01       	movw	r28, r24
 bae:	fb 01       	movw	r30, r22
 bb0:	00 84       	ldd	r0, Z+8	; 0x08
 bb2:	f1 85       	ldd	r31, Z+9	; 0x09
 bb4:	e0 2d       	mov	r30, r0
 bb6:	09 95       	icall
 bb8:	89 2b       	or	r24, r25
 bba:	e1 f6       	brne	.-72     	; 0xb74 <fputc+0x10>
 bbc:	d8 01       	movw	r26, r16
 bbe:	16 96       	adiw	r26, 0x06	; 6
 bc0:	8d 91       	ld	r24, X+
 bc2:	9c 91       	ld	r25, X
 bc4:	17 97       	sbiw	r26, 0x07	; 7
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	17 96       	adiw	r26, 0x07	; 7
 bca:	9c 93       	st	X, r25
 bcc:	8e 93       	st	-X, r24
 bce:	16 97       	sbiw	r26, 0x06	; 6
 bd0:	ce 01       	movw	r24, r28
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <__ultoa_invert>:
 bdc:	fa 01       	movw	r30, r20
 bde:	aa 27       	eor	r26, r26
 be0:	28 30       	cpi	r18, 0x08	; 8
 be2:	51 f1       	breq	.+84     	; 0xc38 <__ultoa_invert+0x5c>
 be4:	20 31       	cpi	r18, 0x10	; 16
 be6:	81 f1       	breq	.+96     	; 0xc48 <__ultoa_invert+0x6c>
 be8:	e8 94       	clt
 bea:	6f 93       	push	r22
 bec:	6e 7f       	andi	r22, 0xFE	; 254
 bee:	6e 5f       	subi	r22, 0xFE	; 254
 bf0:	7f 4f       	sbci	r23, 0xFF	; 255
 bf2:	8f 4f       	sbci	r24, 0xFF	; 255
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	af 4f       	sbci	r26, 0xFF	; 255
 bf8:	b1 e0       	ldi	r27, 0x01	; 1
 bfa:	3e d0       	rcall	.+124    	; 0xc78 <__ultoa_invert+0x9c>
 bfc:	b4 e0       	ldi	r27, 0x04	; 4
 bfe:	3c d0       	rcall	.+120    	; 0xc78 <__ultoa_invert+0x9c>
 c00:	67 0f       	add	r22, r23
 c02:	78 1f       	adc	r23, r24
 c04:	89 1f       	adc	r24, r25
 c06:	9a 1f       	adc	r25, r26
 c08:	a1 1d       	adc	r26, r1
 c0a:	68 0f       	add	r22, r24
 c0c:	79 1f       	adc	r23, r25
 c0e:	8a 1f       	adc	r24, r26
 c10:	91 1d       	adc	r25, r1
 c12:	a1 1d       	adc	r26, r1
 c14:	6a 0f       	add	r22, r26
 c16:	71 1d       	adc	r23, r1
 c18:	81 1d       	adc	r24, r1
 c1a:	91 1d       	adc	r25, r1
 c1c:	a1 1d       	adc	r26, r1
 c1e:	20 d0       	rcall	.+64     	; 0xc60 <__ultoa_invert+0x84>
 c20:	09 f4       	brne	.+2      	; 0xc24 <__ultoa_invert+0x48>
 c22:	68 94       	set
 c24:	3f 91       	pop	r19
 c26:	2a e0       	ldi	r18, 0x0A	; 10
 c28:	26 9f       	mul	r18, r22
 c2a:	11 24       	eor	r1, r1
 c2c:	30 19       	sub	r19, r0
 c2e:	30 5d       	subi	r19, 0xD0	; 208
 c30:	31 93       	st	Z+, r19
 c32:	de f6       	brtc	.-74     	; 0xbea <__ultoa_invert+0xe>
 c34:	cf 01       	movw	r24, r30
 c36:	08 95       	ret
 c38:	46 2f       	mov	r20, r22
 c3a:	47 70       	andi	r20, 0x07	; 7
 c3c:	40 5d       	subi	r20, 0xD0	; 208
 c3e:	41 93       	st	Z+, r20
 c40:	b3 e0       	ldi	r27, 0x03	; 3
 c42:	0f d0       	rcall	.+30     	; 0xc62 <__ultoa_invert+0x86>
 c44:	c9 f7       	brne	.-14     	; 0xc38 <__ultoa_invert+0x5c>
 c46:	f6 cf       	rjmp	.-20     	; 0xc34 <__ultoa_invert+0x58>
 c48:	46 2f       	mov	r20, r22
 c4a:	4f 70       	andi	r20, 0x0F	; 15
 c4c:	40 5d       	subi	r20, 0xD0	; 208
 c4e:	4a 33       	cpi	r20, 0x3A	; 58
 c50:	18 f0       	brcs	.+6      	; 0xc58 <__ultoa_invert+0x7c>
 c52:	49 5d       	subi	r20, 0xD9	; 217
 c54:	31 fd       	sbrc	r19, 1
 c56:	40 52       	subi	r20, 0x20	; 32
 c58:	41 93       	st	Z+, r20
 c5a:	02 d0       	rcall	.+4      	; 0xc60 <__ultoa_invert+0x84>
 c5c:	a9 f7       	brne	.-22     	; 0xc48 <__ultoa_invert+0x6c>
 c5e:	ea cf       	rjmp	.-44     	; 0xc34 <__ultoa_invert+0x58>
 c60:	b4 e0       	ldi	r27, 0x04	; 4
 c62:	a6 95       	lsr	r26
 c64:	97 95       	ror	r25
 c66:	87 95       	ror	r24
 c68:	77 95       	ror	r23
 c6a:	67 95       	ror	r22
 c6c:	ba 95       	dec	r27
 c6e:	c9 f7       	brne	.-14     	; 0xc62 <__ultoa_invert+0x86>
 c70:	00 97       	sbiw	r24, 0x00	; 0
 c72:	61 05       	cpc	r22, r1
 c74:	71 05       	cpc	r23, r1
 c76:	08 95       	ret
 c78:	9b 01       	movw	r18, r22
 c7a:	ac 01       	movw	r20, r24
 c7c:	0a 2e       	mov	r0, r26
 c7e:	06 94       	lsr	r0
 c80:	57 95       	ror	r21
 c82:	47 95       	ror	r20
 c84:	37 95       	ror	r19
 c86:	27 95       	ror	r18
 c88:	ba 95       	dec	r27
 c8a:	c9 f7       	brne	.-14     	; 0xc7e <__ultoa_invert+0xa2>
 c8c:	62 0f       	add	r22, r18
 c8e:	73 1f       	adc	r23, r19
 c90:	84 1f       	adc	r24, r20
 c92:	95 1f       	adc	r25, r21
 c94:	a0 1d       	adc	r26, r0
 c96:	08 95       	ret

00000c98 <__prologue_saves__>:
 c98:	2f 92       	push	r2
 c9a:	3f 92       	push	r3
 c9c:	4f 92       	push	r4
 c9e:	5f 92       	push	r5
 ca0:	6f 92       	push	r6
 ca2:	7f 92       	push	r7
 ca4:	8f 92       	push	r8
 ca6:	9f 92       	push	r9
 ca8:	af 92       	push	r10
 caa:	bf 92       	push	r11
 cac:	cf 92       	push	r12
 cae:	df 92       	push	r13
 cb0:	ef 92       	push	r14
 cb2:	ff 92       	push	r15
 cb4:	0f 93       	push	r16
 cb6:	1f 93       	push	r17
 cb8:	cf 93       	push	r28
 cba:	df 93       	push	r29
 cbc:	cd b7       	in	r28, 0x3d	; 61
 cbe:	de b7       	in	r29, 0x3e	; 62
 cc0:	ca 1b       	sub	r28, r26
 cc2:	db 0b       	sbc	r29, r27
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
 cc8:	de bf       	out	0x3e, r29	; 62
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	cd bf       	out	0x3d, r28	; 61
 cce:	09 94       	ijmp

00000cd0 <__epilogue_restores__>:
 cd0:	2a 88       	ldd	r2, Y+18	; 0x12
 cd2:	39 88       	ldd	r3, Y+17	; 0x11
 cd4:	48 88       	ldd	r4, Y+16	; 0x10
 cd6:	5f 84       	ldd	r5, Y+15	; 0x0f
 cd8:	6e 84       	ldd	r6, Y+14	; 0x0e
 cda:	7d 84       	ldd	r7, Y+13	; 0x0d
 cdc:	8c 84       	ldd	r8, Y+12	; 0x0c
 cde:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce2:	b9 84       	ldd	r11, Y+9	; 0x09
 ce4:	c8 84       	ldd	r12, Y+8	; 0x08
 ce6:	df 80       	ldd	r13, Y+7	; 0x07
 ce8:	ee 80       	ldd	r14, Y+6	; 0x06
 cea:	fd 80       	ldd	r15, Y+5	; 0x05
 cec:	0c 81       	ldd	r16, Y+4	; 0x04
 cee:	1b 81       	ldd	r17, Y+3	; 0x03
 cf0:	aa 81       	ldd	r26, Y+2	; 0x02
 cf2:	b9 81       	ldd	r27, Y+1	; 0x01
 cf4:	ce 0f       	add	r28, r30
 cf6:	d1 1d       	adc	r29, r1
 cf8:	0f b6       	in	r0, 0x3f	; 63
 cfa:	f8 94       	cli
 cfc:	de bf       	out	0x3e, r29	; 62
 cfe:	0f be       	out	0x3f, r0	; 63
 d00:	cd bf       	out	0x3d, r28	; 61
 d02:	ed 01       	movw	r28, r26
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
