var search_data = {"index":{"searchIndex":["drzewobinarne","element","stringbt","<=>()","istnieje2?()","istnieje?()","min()","new()","new()","to_s()","to_s()","usun()","usun2()","wstaw()","wstaw2()"],"longSearchIndex":["drzewobinarne","element","stringbt","element#<=>()","drzewobinarne#istnieje2?()","drzewobinarne#istnieje?()","drzewobinarne#min()","drzewobinarne::new()","element::new()","drzewobinarne#to_s()","element#to_s()","drzewobinarne#usun()","drzewobinarne#usun2()","drzewobinarne#wstaw()","drzewobinarne#wstaw2()"],"info":[["DrzewoBinarne","","DrzewoBinarne.html","","<p>Klasa zawierająca wskaźnik na korzeń drzewa. Umożliwia wykonywanie opracji\ntakich jak wstaw, usuń, istnieje? …\n"],["Element","","Element.html","","<p>Klasa przechowująca wartość węzła oraz jego prawe i lewe dziecko. Umożliwia\nporównywanie węzłów dzięki …\n"],["StringBT","","StringBT.html","","<p>Klasa umożliwiająca wstawianie od drzewa obiektów typu string.\n"],["<=>","Element","Element.html#method-i-3C-3D-3E","(otherElement)","<p>Prównuje dwa obiekty klasy <code>Element</code>. Params:\n<p><code>otherElement</code> &mdash; Obiekt klasy <code>Element</code>\n\n"],["istnieje2?","DrzewoBinarne","DrzewoBinarne.html#method-i-istnieje2-3F","(newElement, tree)","<p>Sprawdza czy węzeł newElement występuje w drzwie tree. Zwraca true lub\nfalse w zależności od tego czy …\n"],["istnieje?","DrzewoBinarne","DrzewoBinarne.html#method-i-istnieje-3F","(value)","<p>Wywołuje operację sprawdzenia istnienia węzła na korzeniu drzewa. Params:\n<p><code>value</code> &mdash; wartość do sprawdzenia …\n\n"],["min","DrzewoBinarne","DrzewoBinarne.html#method-i-min","(tree=@root)","<p>Znajduje najmniejszy element w drzewie tree (domyślnie @root). Params:\n<p><code>tree</code> &mdash; Obiekt klasy <code>Element</code>\n\n"],["new","DrzewoBinarne","DrzewoBinarne.html#method-c-new","(value)","<p>Tworzy korzeń drzewa i przypisz mu wartość value. Params:\n<p><code>value</code> &mdash; wartość nowego węzła\n\n"],["new","Element","Element.html#method-c-new","(value, left=nil, right=nil)","<p>Przypisuje wartość korzenia oraz jego lewego  oraz prawego dziecka. Params:\n<p><code>value</code> &mdash; Dowolny element\n<p><code>left</code> … &mdash; "],["to_s","DrzewoBinarne","DrzewoBinarne.html#method-i-to_s","(tree=@root)","<p>Zwracająca string opisujący drzewo w postaci infiksowej. Params:\n<p><code>tree</code> &mdash; Obiekt klasy <code>Element</code>\n\n"],["to_s","Element","Element.html#method-i-to_s","()","<p>Zwracająca string opisujący korzeń.\n"],["usun","DrzewoBinarne","DrzewoBinarne.html#method-i-usun","(value)","<p>Wywołuje operację usunięcia na korzeniu drzewa. Params:\n<p><code>value</code> &mdash; wartość do usunięcia\n\n"],["usun2","DrzewoBinarne","DrzewoBinarne.html#method-i-usun2","(element, tree)","<p>Usuwa węzeł newElement z drzewa tree. Jeśli tree jest nullem lub element\nnie  występuje w drzewie zwraca …\n"],["wstaw","DrzewoBinarne","DrzewoBinarne.html#method-i-wstaw","(value)","<p>Wywołuje operację wstawienia węzła na korzeniu drzewa. Params:\n<p><code>value</code> &mdash; wartość do wstawienia\n\n"],["wstaw2","DrzewoBinarne","DrzewoBinarne.html#method-i-wstaw2","(newElement, tree)","<p>Wstawia węzeł newElement do drzewa tree w odpowienie miejsce. Jeśli tree\njest nullem tworzy nowe drzewo. …\n"]]}}